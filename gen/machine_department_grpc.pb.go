// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: machine_department.proto

package ssov1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MachineDepartment_GetInfoMachineDep_FullMethodName       = "/myservice.MachineDepartment/GetInfoMachineDep"
	MachineDepartment_ChangeInfoEngine_FullMethodName        = "/myservice.MachineDepartment/ChangeInfoEngine"
	MachineDepartment_ChangeInfoCoolingSystem_FullMethodName = "/myservice.MachineDepartment/ChangeInfoCoolingSystem"
	MachineDepartment_ChangeInfoGenerator_FullMethodName     = "/myservice.MachineDepartment/ChangeInfoGenerator"
	MachineDepartment_ChangeInfoFuelSystem_FullMethodName    = "/myservice.MachineDepartment/ChangeInfoFuelSystem"
)

// MachineDepartmentClient is the client API for MachineDepartment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MachineDepartmentClient interface {
	GetInfoMachineDep(ctx context.Context, in *UserName, opts ...grpc.CallOption) (MachineDepartment_GetInfoMachineDepClient, error)
	ChangeInfoEngine(ctx context.Context, in *Engine, opts ...grpc.CallOption) (*Empty, error)
	ChangeInfoCoolingSystem(ctx context.Context, in *CoolingSystem, opts ...grpc.CallOption) (*Empty, error)
	ChangeInfoGenerator(ctx context.Context, in *Generator, opts ...grpc.CallOption) (*Empty, error)
	ChangeInfoFuelSystem(ctx context.Context, in *FuelSystem, opts ...grpc.CallOption) (*Empty, error)
}

type machineDepartmentClient struct {
	cc grpc.ClientConnInterface
}

func NewMachineDepartmentClient(cc grpc.ClientConnInterface) MachineDepartmentClient {
	return &machineDepartmentClient{cc}
}

func (c *machineDepartmentClient) GetInfoMachineDep(ctx context.Context, in *UserName, opts ...grpc.CallOption) (MachineDepartment_GetInfoMachineDepClient, error) {
	stream, err := c.cc.NewStream(ctx, &MachineDepartment_ServiceDesc.Streams[0], MachineDepartment_GetInfoMachineDep_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &machineDepartmentGetInfoMachineDepClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MachineDepartment_GetInfoMachineDepClient interface {
	Recv() (*InfoMachineDep, error)
	grpc.ClientStream
}

type machineDepartmentGetInfoMachineDepClient struct {
	grpc.ClientStream
}

func (x *machineDepartmentGetInfoMachineDepClient) Recv() (*InfoMachineDep, error) {
	m := new(InfoMachineDep)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *machineDepartmentClient) ChangeInfoEngine(ctx context.Context, in *Engine, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, MachineDepartment_ChangeInfoEngine_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineDepartmentClient) ChangeInfoCoolingSystem(ctx context.Context, in *CoolingSystem, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, MachineDepartment_ChangeInfoCoolingSystem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineDepartmentClient) ChangeInfoGenerator(ctx context.Context, in *Generator, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, MachineDepartment_ChangeInfoGenerator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineDepartmentClient) ChangeInfoFuelSystem(ctx context.Context, in *FuelSystem, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, MachineDepartment_ChangeInfoFuelSystem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MachineDepartmentServer is the server API for MachineDepartment service.
// All implementations must embed UnimplementedMachineDepartmentServer
// for forward compatibility
type MachineDepartmentServer interface {
	GetInfoMachineDep(*UserName, MachineDepartment_GetInfoMachineDepServer) error
	ChangeInfoEngine(context.Context, *Engine) (*Empty, error)
	ChangeInfoCoolingSystem(context.Context, *CoolingSystem) (*Empty, error)
	ChangeInfoGenerator(context.Context, *Generator) (*Empty, error)
	ChangeInfoFuelSystem(context.Context, *FuelSystem) (*Empty, error)
	mustEmbedUnimplementedMachineDepartmentServer()
}

// UnimplementedMachineDepartmentServer must be embedded to have forward compatible implementations.
type UnimplementedMachineDepartmentServer struct {
}

func (UnimplementedMachineDepartmentServer) GetInfoMachineDep(*UserName, MachineDepartment_GetInfoMachineDepServer) error {
	return status.Errorf(codes.Unimplemented, "method GetInfoMachineDep not implemented")
}
func (UnimplementedMachineDepartmentServer) ChangeInfoEngine(context.Context, *Engine) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeInfoEngine not implemented")
}
func (UnimplementedMachineDepartmentServer) ChangeInfoCoolingSystem(context.Context, *CoolingSystem) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeInfoCoolingSystem not implemented")
}
func (UnimplementedMachineDepartmentServer) ChangeInfoGenerator(context.Context, *Generator) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeInfoGenerator not implemented")
}
func (UnimplementedMachineDepartmentServer) ChangeInfoFuelSystem(context.Context, *FuelSystem) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeInfoFuelSystem not implemented")
}
func (UnimplementedMachineDepartmentServer) mustEmbedUnimplementedMachineDepartmentServer() {}

// UnsafeMachineDepartmentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MachineDepartmentServer will
// result in compilation errors.
type UnsafeMachineDepartmentServer interface {
	mustEmbedUnimplementedMachineDepartmentServer()
}

func RegisterMachineDepartmentServer(s grpc.ServiceRegistrar, srv MachineDepartmentServer) {
	s.RegisterService(&MachineDepartment_ServiceDesc, srv)
}

func _MachineDepartment_GetInfoMachineDep_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserName)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MachineDepartmentServer).GetInfoMachineDep(m, &machineDepartmentGetInfoMachineDepServer{stream})
}

type MachineDepartment_GetInfoMachineDepServer interface {
	Send(*InfoMachineDep) error
	grpc.ServerStream
}

type machineDepartmentGetInfoMachineDepServer struct {
	grpc.ServerStream
}

func (x *machineDepartmentGetInfoMachineDepServer) Send(m *InfoMachineDep) error {
	return x.ServerStream.SendMsg(m)
}

func _MachineDepartment_ChangeInfoEngine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Engine)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineDepartmentServer).ChangeInfoEngine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MachineDepartment_ChangeInfoEngine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineDepartmentServer).ChangeInfoEngine(ctx, req.(*Engine))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineDepartment_ChangeInfoCoolingSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoolingSystem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineDepartmentServer).ChangeInfoCoolingSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MachineDepartment_ChangeInfoCoolingSystem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineDepartmentServer).ChangeInfoCoolingSystem(ctx, req.(*CoolingSystem))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineDepartment_ChangeInfoGenerator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Generator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineDepartmentServer).ChangeInfoGenerator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MachineDepartment_ChangeInfoGenerator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineDepartmentServer).ChangeInfoGenerator(ctx, req.(*Generator))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineDepartment_ChangeInfoFuelSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FuelSystem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineDepartmentServer).ChangeInfoFuelSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MachineDepartment_ChangeInfoFuelSystem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineDepartmentServer).ChangeInfoFuelSystem(ctx, req.(*FuelSystem))
	}
	return interceptor(ctx, in, info, handler)
}

// MachineDepartment_ServiceDesc is the grpc.ServiceDesc for MachineDepartment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MachineDepartment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "myservice.MachineDepartment",
	HandlerType: (*MachineDepartmentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChangeInfoEngine",
			Handler:    _MachineDepartment_ChangeInfoEngine_Handler,
		},
		{
			MethodName: "ChangeInfoCoolingSystem",
			Handler:    _MachineDepartment_ChangeInfoCoolingSystem_Handler,
		},
		{
			MethodName: "ChangeInfoGenerator",
			Handler:    _MachineDepartment_ChangeInfoGenerator_Handler,
		},
		{
			MethodName: "ChangeInfoFuelSystem",
			Handler:    _MachineDepartment_ChangeInfoFuelSystem_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetInfoMachineDep",
			Handler:       _MachineDepartment_GetInfoMachineDep_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "machine_department.proto",
}
