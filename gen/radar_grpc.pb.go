// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: radar.proto

package ssov1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Radar_GetRadarInfo_FullMethodName         = "/myservice.Radar/GetRadarInfo"
	Radar_ChangeShipParameters_FullMethodName = "/myservice.Radar/ChangeShipParameters"
)

// RadarClient is the client API for Radar service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RadarClient interface {
	GetRadarInfo(ctx context.Context, in *UserName, opts ...grpc.CallOption) (Radar_GetRadarInfoClient, error)
	ChangeShipParameters(ctx context.Context, in *UpdateShipParameters, opts ...grpc.CallOption) (*Empty, error)
}

type radarClient struct {
	cc grpc.ClientConnInterface
}

func NewRadarClient(cc grpc.ClientConnInterface) RadarClient {
	return &radarClient{cc}
}

func (c *radarClient) GetRadarInfo(ctx context.Context, in *UserName, opts ...grpc.CallOption) (Radar_GetRadarInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &Radar_ServiceDesc.Streams[0], Radar_GetRadarInfo_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &radarGetRadarInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Radar_GetRadarInfoClient interface {
	Recv() (*Object, error)
	grpc.ClientStream
}

type radarGetRadarInfoClient struct {
	grpc.ClientStream
}

func (x *radarGetRadarInfoClient) Recv() (*Object, error) {
	m := new(Object)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *radarClient) ChangeShipParameters(ctx context.Context, in *UpdateShipParameters, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Radar_ChangeShipParameters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RadarServer is the server API for Radar service.
// All implementations must embed UnimplementedRadarServer
// for forward compatibility
type RadarServer interface {
	GetRadarInfo(*UserName, Radar_GetRadarInfoServer) error
	ChangeShipParameters(context.Context, *UpdateShipParameters) (*Empty, error)
	mustEmbedUnimplementedRadarServer()
}

// UnimplementedRadarServer must be embedded to have forward compatible implementations.
type UnimplementedRadarServer struct {
}

func (UnimplementedRadarServer) GetRadarInfo(*UserName, Radar_GetRadarInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRadarInfo not implemented")
}
func (UnimplementedRadarServer) ChangeShipParameters(context.Context, *UpdateShipParameters) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeShipParameters not implemented")
}
func (UnimplementedRadarServer) mustEmbedUnimplementedRadarServer() {}

// UnsafeRadarServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RadarServer will
// result in compilation errors.
type UnsafeRadarServer interface {
	mustEmbedUnimplementedRadarServer()
}

func RegisterRadarServer(s grpc.ServiceRegistrar, srv RadarServer) {
	s.RegisterService(&Radar_ServiceDesc, srv)
}

func _Radar_GetRadarInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserName)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RadarServer).GetRadarInfo(m, &radarGetRadarInfoServer{stream})
}

type Radar_GetRadarInfoServer interface {
	Send(*Object) error
	grpc.ServerStream
}

type radarGetRadarInfoServer struct {
	grpc.ServerStream
}

func (x *radarGetRadarInfoServer) Send(m *Object) error {
	return x.ServerStream.SendMsg(m)
}

func _Radar_ChangeShipParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateShipParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RadarServer).ChangeShipParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Radar_ChangeShipParameters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RadarServer).ChangeShipParameters(ctx, req.(*UpdateShipParameters))
	}
	return interceptor(ctx, in, info, handler)
}

// Radar_ServiceDesc is the grpc.ServiceDesc for Radar service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Radar_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "myservice.Radar",
	HandlerType: (*RadarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChangeShipParameters",
			Handler:    _Radar_ChangeShipParameters_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetRadarInfo",
			Handler:       _Radar_GetRadarInfo_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "radar.proto",
}
